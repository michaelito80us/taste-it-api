// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id              Int        @id @default(autoincrement())
  slug            String     @unique
  eventName       String
  description     String?
  startDate       String     @default("2023-01-01")
  endDate         String     @default("2023-01-01")
  startTime       String     @default("00:00:00")
  endTime         String     @default("00:00:00")
  startDateTime   DateTime
  endDateTime     DateTime
  isActive        Boolean    @default(false)
  isStarted       Boolean    @default(false)
  isFinished      Boolean    @default(false)
  hasMaxAttendees Boolean    @default(false)
  maxAttendees    Int        @default(0)
  totalAttendees  Int        @default(0)
  pictureUrl      String
  eventCreator    User       @relation(fields: [eventCreatorId], references: [id])
  isDeleted       Boolean    @default(false)
  eventCreatorId  Int
  venueName       String
  venueAddress    String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?  @map("deleted_at")
  Attendee        Attendee[]
  Article         Article[]

  @@unique(fields: [slug, isActive], name: "activeEvent")
  @@unique(fields: [slug, eventCreatorId], name: "currentEventCreator")
}

model User {
  id        Int        @id @default(autoincrement())
  slug      String     @unique
  name      String
  email     String     @unique
  password  String
  photoUrl  String?
  phone     String?
  instagram String?
  twitter   String?
  facebook  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  @map("deleted_at")
  Event     Event[]
  Attendee  Attendee[]
  Article   Article[]
}

model Attendee {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  event         Event     @relation(fields: [eventId], references: [id])
  eventId       Int
  numberOfSeats Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? @map("deleted_at")

  @@unique(fields: [userId, eventId], name: "attendee")
}

model Article {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  isInPage  Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
}

model Slug {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
